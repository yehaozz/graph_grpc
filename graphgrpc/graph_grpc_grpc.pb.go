// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: graphgrpc/graph_grpc.proto

package graph_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OperationsClient is the client API for Operations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperationsClient interface {
	// Post a graph and return an ID of the graph.
	PostGraph(ctx context.Context, opts ...grpc.CallOption) (Operations_PostGraphClient, error)
	// Get the shortest path between two vertices in a graph.
	//
	// -1 is returned if there is not a graph corresponding to the given Id.
	ShortestPath(ctx context.Context, in *VertexDescription, opts ...grpc.CallOption) (*Distance, error)
	// Delete a graph.
	//
	// Return a message indicating whether the delete process succeeds.
	DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*DeleteResult, error)
}

type operationsClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationsClient(cc grpc.ClientConnInterface) OperationsClient {
	return &operationsClient{cc}
}

func (c *operationsClient) PostGraph(ctx context.Context, opts ...grpc.CallOption) (Operations_PostGraphClient, error) {
	stream, err := c.cc.NewStream(ctx, &Operations_ServiceDesc.Streams[0], "/graphgrpc.Operations/PostGraph", opts...)
	if err != nil {
		return nil, err
	}
	x := &operationsPostGraphClient{stream}
	return x, nil
}

type Operations_PostGraphClient interface {
	Send(*Vertex) error
	CloseAndRecv() (*GraphID, error)
	grpc.ClientStream
}

type operationsPostGraphClient struct {
	grpc.ClientStream
}

func (x *operationsPostGraphClient) Send(m *Vertex) error {
	return x.ClientStream.SendMsg(m)
}

func (x *operationsPostGraphClient) CloseAndRecv() (*GraphID, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GraphID)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *operationsClient) ShortestPath(ctx context.Context, in *VertexDescription, opts ...grpc.CallOption) (*Distance, error) {
	out := new(Distance)
	err := c.cc.Invoke(ctx, "/graphgrpc.Operations/ShortestPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationsClient) DeleteGraph(ctx context.Context, in *GraphID, opts ...grpc.CallOption) (*DeleteResult, error) {
	out := new(DeleteResult)
	err := c.cc.Invoke(ctx, "/graphgrpc.Operations/DeleteGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationsServer is the server API for Operations service.
// All implementations must embed UnimplementedOperationsServer
// for forward compatibility
type OperationsServer interface {
	// Post a graph and return an ID of the graph.
	PostGraph(Operations_PostGraphServer) error
	// Get the shortest path between two vertices in a graph.
	//
	// -1 is returned if there is not a graph corresponding to the given Id.
	ShortestPath(context.Context, *VertexDescription) (*Distance, error)
	// Delete a graph.
	//
	// Return a message indicating whether the delete process succeeds.
	DeleteGraph(context.Context, *GraphID) (*DeleteResult, error)
	mustEmbedUnimplementedOperationsServer()
}

// UnimplementedOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedOperationsServer struct {
}

func (UnimplementedOperationsServer) PostGraph(Operations_PostGraphServer) error {
	return status.Errorf(codes.Unimplemented, "method PostGraph not implemented")
}
func (UnimplementedOperationsServer) ShortestPath(context.Context, *VertexDescription) (*Distance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortestPath not implemented")
}
func (UnimplementedOperationsServer) DeleteGraph(context.Context, *GraphID) (*DeleteResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGraph not implemented")
}
func (UnimplementedOperationsServer) mustEmbedUnimplementedOperationsServer() {}

// UnsafeOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationsServer will
// result in compilation errors.
type UnsafeOperationsServer interface {
	mustEmbedUnimplementedOperationsServer()
}

func RegisterOperationsServer(s grpc.ServiceRegistrar, srv OperationsServer) {
	s.RegisterService(&Operations_ServiceDesc, srv)
}

func _Operations_PostGraph_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OperationsServer).PostGraph(&operationsPostGraphServer{stream})
}

type Operations_PostGraphServer interface {
	SendAndClose(*GraphID) error
	Recv() (*Vertex, error)
	grpc.ServerStream
}

type operationsPostGraphServer struct {
	grpc.ServerStream
}

func (x *operationsPostGraphServer) SendAndClose(m *GraphID) error {
	return x.ServerStream.SendMsg(m)
}

func (x *operationsPostGraphServer) Recv() (*Vertex, error) {
	m := new(Vertex)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Operations_ShortestPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VertexDescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).ShortestPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphgrpc.Operations/ShortestPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).ShortestPath(ctx, req.(*VertexDescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _Operations_DeleteGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationsServer).DeleteGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/graphgrpc.Operations/DeleteGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationsServer).DeleteGraph(ctx, req.(*GraphID))
	}
	return interceptor(ctx, in, info, handler)
}

// Operations_ServiceDesc is the grpc.ServiceDesc for Operations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Operations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "graphgrpc.Operations",
	HandlerType: (*OperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortestPath",
			Handler:    _Operations_ShortestPath_Handler,
		},
		{
			MethodName: "DeleteGraph",
			Handler:    _Operations_DeleteGraph_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostGraph",
			Handler:       _Operations_PostGraph_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "graphgrpc/graph_grpc.proto",
}
